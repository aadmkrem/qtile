#!/usr/bin/env python3
import asyncio
import websockets
import json
import requests
from textual import on
from textual.app import App, ComposeResult
from textual.containers import Container, Horizontal, Vertical
from textual.widgets import Header, Footer, Input, Button, Static, RichLog
from textual.screen import Screen, ModalScreen
from textual.reactive import reactive


class LoginScreen(ModalScreen):
    """–≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""

    def compose(self) -> ComposeResult:
        yield Container(
            Static("üîê Sea Messenger", classes="header"),
            Input(placeholder="–õ–æ–≥–∏–Ω", id="username"),
            Input(placeholder="–ü–∞—Ä–æ–ª—å", password=True, id="password"),
            Horizontal(
                Button("–í–æ–π—Ç–∏", id="login", variant="primary"),
                Button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", id="register"),
            ),
            Static(id="status", classes="status"),
            classes="dialog"
        )

    @on(Button.Pressed, "#login")
    def on_login(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞"""
        asyncio.create_task(self.do_login())

    @on(Button.Pressed, "#register")
    def on_register(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        asyncio.create_task(self.do_register())

    async def do_login(self):
        """–í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥"""
        username = self.query_one("#username").value
        password = self.query_one("#password").value

        if not username or not password:
            self.query_one("#status").update("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        try:
            response = requests.post(
                "https://sea.dash756.ru/api/login",
                json={"username": username, "password": password}
            )

            if response.status_code == 200:
                self.app.current_user = username
                self.app.logged_in = True
                self.dismiss()
                await self.app.connect_websocket()
            else:
                self.query_one("#status").update("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")

        except Exception as e:
            self.query_one("#status").update(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def do_register(self):
        """–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
        username = self.query_one("#username").value
        password = self.query_one("#password").value

        if not username or not password:
            self.query_one("#status").update("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        try:
            response = requests.post(
                "https://sea.dash756.ru/api/register",
                json={"username": username, "password": password}
            )

            if response.status_code == 200:
                self.query_one("#status").update("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
            else:
                self.query_one("#status").update("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

        except Exception as e:
            self.query_one("#status").update(f"‚ùå –û—à–∏–±–∫–∞: {e}")


class MessengerClient(App):
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è Sea Messenger"""

    CSS = """
    Screen {
        layout: horizontal;
    }

    #sidebar {
        width: 30%;
        border: solid $accent;
        background: $surface;
    }

    #chat-area {
        width: 70%;
        border: solid $accent;
    }

    #messages {
        height: 80%;
        border: solid $panel;
    }

    #input-area {
        height: 20%;
        border: solid $panel;
    }

    .message {
        margin: 1;
        padding: 1;
    }
    """

    BINDINGS = [
        ("ctrl+q", "quit", "Quit"),
        ("ctrl+r", "refresh", "Refresh"),
    ]

    def __init__(self):
        super().__init__()
        self.websocket = None
        self.base_url = "https://sea.dash756.ru/api"
        self.ws_url = "wss://sea.dash756.ru/ws"
        self.current_user = ""
        self.logged_in = False
        self.messages = []

    def compose(self) -> ComposeResult:
        yield Header()
        yield Container(
            Vertical(
                Static("üí¨ Sea Messenger", id="app-title"),
                Static(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user}", id="user-info"),
                Button("–û–±–Ω–æ–≤–∏—Ç—å", id="refresh"),
                Button("–í—ã–π—Ç–∏", id="logout"),
                id="sidebar"
            ),
            Vertical(
                RichLog(id="messages", wrap=True, markup=True),
                Horizontal(
                    Input(placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", id="message-input"),
                    Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", id="send-btn"),
                ),
                id="chat-area"
            ),
        )
        yield Footer()

    async def on_mount(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ"""
        if not self.logged_in:
            await self.show_login_screen()

    async def show_login_screen(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ª–æ–≥–∏–Ω–∞"""
        await self.push_screen(LoginScreen())

    async def connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.websocket = await websockets.connect(self.ws_url)
            asyncio.create_task(self.listen_messages())
            self.notify("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É", severity="information")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.query_one("#user-info").update(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user}")

        except Exception as e:
            self.notify(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", severity="error")

    async def listen_messages(self):
        """–°–ª—É—à–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            async for message in self.websocket:
                data = json.loads(message)
                await self.handle_message(data)
        except Exception as e:
            self.notify(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}", severity="error")

    async def handle_message(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        msg_type = data.get("type")

        if msg_type == "message":
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
            messages_widget = self.query_one("#messages")
            sender = data.get("sender", "Unknown")
            text = data.get("text", "")
            messages_widget.write(f"[bold]{sender}:[/bold] {text}")

        elif msg_type == "echo":
            self.notify(f"–≠—Ö–æ: {data.get('text', '')}")

    async def action_send_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not text.strip():
            return

        message_data = {
            "type": "message",
            "text": text,
            "sender": self.current_user,
            "timestamp": str(asyncio.get_event_loop().time())
        }

        if self.websocket:
            await self.websocket.send(json.dumps(message_data))

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        messages_widget = self.query_one("#messages")
        messages_widget.write(f"[bold blue]–í—ã:[/bold blue] {text}")

        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        input_widget = self.query_one("#message-input")
        input_widget.value = ""

    @on(Input.Submitted, "#message-input")
    def on_message_submitted(self, event: Input.Submitted) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter"""
        asyncio.create_task(self.action_send_message(event.value))

    @on(Button.Pressed, "#send-btn")
    def on_send_button(self, event: Button.Pressed) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        input_widget = self.query_one("#message-input")
        asyncio.create_task(self.action_send_message(input_widget.value))

    @on(Button.Pressed, "#refresh")
    def on_refresh(self, event: Button.Pressed) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.query_one("#messages").clear()
        self.query_one("#messages").write("üí¨ –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        self.notify("–ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")

    @on(Button.Pressed, "#logout")
    def on_logout(self, event: Button.Pressed) -> None:
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.logged_in = False
        self.current_user = ""
        if self.websocket:
            asyncio.create_task(self.websocket.close())
        asyncio.create_task(self.show_login_screen())


if __name__ == "__main__":
    app = MessengerClient()
    app.run()